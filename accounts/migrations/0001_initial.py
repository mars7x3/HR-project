# Generated by Django 4.1 on 2022-12-12 21:12

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('user_status', models.CharField(blank=True, choices=[('applicant', 'Ищу работу'), ('entity', 'Ищу сотрудника'), ('main', 'Полный'), ('manager', 'Менеджер'), ('moderator', 'Модератор')], max_length=50, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='user_avatar')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmailAndCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='user-image')),
            ],
        ),
        migrations.CreateModel(
            name='EntityProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, upload_to='profile-images')),
                ('full_name', models.CharField(blank=True, max_length=100)),
                ('position', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('company', models.CharField(blank=True, max_length=200, null=True)),
                ('inn', models.CharField(blank=True, max_length=20, null=True)),
                ('activity', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.CharField(blank=True, max_length=100, null=True)),
                ('site', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('company_type', models.BooleanField(default=False)),
                ('social_media_type', models.CharField(blank=True, max_length=20, null=True)),
                ('social_media', models.CharField(blank=True, max_length=100, null=True)),
                ('instagram', models.CharField(blank=True, max_length=200, null=True)),
                ('facebook', models.CharField(blank=True, max_length=200, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('moderation_comment', models.TextField(blank=True, null=True)),
                ('is_moderation', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='entity_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manager_name', models.CharField(max_length=100)),
                ('telegram', models.CharField(max_length=100)),
                ('whatsapp', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=100)),
                ('manager', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manager', to=settings.AUTH_USER_MODEL)),
                ('profiles', models.ManyToManyField(blank=True, related_name='manager', to='accounts.entityprofile')),
            ],
        ),
        migrations.CreateModel(
            name='PasswordTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100)),
                ('password', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ProfileComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profile_comments', to='accounts.manager')),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comments', to='accounts.entityprofile')),
            ],
        ),
        migrations.CreateModel(
            name='EntityRequisite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_name', models.CharField(max_length=200, verbose_name='Название юр лица')),
                ('inn', models.CharField(max_length=50, verbose_name='ИНН')),
                ('okpo', models.CharField(max_length=100, verbose_name='ОКПО')),
                ('mailing_address', models.CharField(max_length=100, verbose_name='Почтовый адрес')),
                ('entity_address', models.CharField(max_length=100, verbose_name='Юридический адрес')),
                ('bik', models.CharField(max_length=20, verbose_name='БИК')),
                ('bank_name', models.CharField(max_length=100, verbose_name='Название банка')),
                ('checking_account', models.CharField(max_length=100, verbose_name='Расчетный счет')),
                ('gni', models.CharField(max_length=100, verbose_name='ГНИ')),
                ('contact', models.CharField(max_length=100, verbose_name='Контактное лицо')),
                ('email', models.CharField(max_length=100, verbose_name='E-mail для отправки счетов')),
                ('info', models.TextField(verbose_name='Дополнительная информация')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entity_requisites', to='accounts.entityprofile')),
            ],
        ),
        migrations.CreateModel(
            name='EntityProfilePhone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=20)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entity_phones', to='accounts.entityprofile')),
            ],
        ),
        migrations.CreateModel(
            name='EntityPersonal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('position', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=20)),
                ('email', models.CharField(max_length=100)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entity_personals', to='accounts.entityprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_add', models.DateTimeField(auto_now=True)),
                ('document', models.FileField(upload_to='entity-documents', verbose_name='Документ')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entity_documents', to='accounts.entityprofile')),
            ],
        ),
    ]
